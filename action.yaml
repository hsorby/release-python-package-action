name: 'Create release of Python package'

description: 'Create a release and upload built python package to PyPI.'

inputs:
  pypi-package-name:
    description: 'Specify the name of the python package on PyPI.org.'
    required: true
    default: 'not-a-name'
  release-heading:
    description: 'Specify the heading for the release.'
    required: false
    default: '${{ github.ref_name }}'
  run-tests:
    description: 'Specify if tests should be run, unittest currently only support.'
    required: false
    default: 'off'

runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.x
    - name: Install dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel build
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Test
      if: inputs.run-tests == 'unittest'
      shell: bash
      run: |
        python -m unittest discover -s tests/
    - name: Build
      id: build
      shell: bash
      run: |
        python --version
        python -m build . --wheel
        echo "dist content:"
        ls dist/
    - name: Create Release
      shell: bash
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        gh release create "${{ github.ref_name }}" \
            --repo="$GITHUB_REPOSITORY" \
            --title="${{ inputs.release-heading }}" \
            --generate-notes
    - name: Send event
      uses: peter-evans/repository-dispatch@v3
      with:
        event-type: release-created
        client-payload: '{"ref": "${{ github.ref }}", "sha": "${{ github.sha }}", "release_id": "${{ steps.create_release.outputs.id }}", "pypi_package_name": "${{ inputs.pypi-package-name }}"}'
    - name: Publish package distributions to PyPI
      env:
        name: pypi
        url: https://pypi.org/p/${{ inputs.pypi-package-name }}
      uses: pypa/gh-action-pypi-publish@release/v1
